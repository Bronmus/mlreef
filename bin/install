#!/bin/bash
# change to the repository root folder via the scripts location
cd "$(dirname "$0")"/..
. bin/includes/log
. bin/includes/detect-os
. bin/includes/detect-docker-runtime
. bin/includes/gitlab-health
. bin/includes/install-parse-cli-params
. bin/includes/gitlab-settings
########################################
set -x  # output all commands
set -o  pipefail || true
set -e  # exit on immediately on every error
set -u  # error on usage of undefined variables
########################################

log "###### DOCKER_NVIDIA_RUNTIME $DOCKER_NVIDIA_RUNTIME"

export GITLAB_PORT=10080

# backup local.env if it exits
cp local.env local.env.bak 2>/dev/null || true
# delete local.enc if it exists
rm -f local.env 2>/dev/null || true
###############################################################################

. bin/includes/install-render-local-env


####
log "Starting Deployment"
log "Stopping service gateway backend mlreefdb"
docker-compose -f docker-compose.local.yml stop gateway backend mlreefdb
log "Starting Deployment"

####
log "MANDATORY ENV VARS:"
cat local.env


#
#
# Step 1 Startup Gitlab
#
#
log "1. Starting Gitlab Omnibus"
# the container ec2-startup wait is necessary to let gitlab initialise the database
log "Pulling and starting 'Gitlab'"
docker-compose -f docker-compose.local.yml pull gitlab && docker-compose -f docker-compose.local.yml up --detach gitlab
log "Pulling and starting 'Gitlab Runner'"
docker-compose -f docker-compose.local.yml pull gitlab-runner && docker-compose -f docker-compose.local.yml up --detach gitlab-runner
waitUntilGitlabAvailable

#
#
# Step 2 Configure Gitlab's port and external URL
#
#

log "Ensuring availability of the Gitlab API to start"
until [ "$(checkGitlabPort /api/v4/projects)" = "200" ]; do
  printf '.'
  sleep 5;
done
log "Expecting code 200; received: $(checkGitlabPort /api/v4/projects)"
log "Waiting for Gitlab Runners API. The runners API is running in a separate process from the normal API"
until [ "$(checkGitlabPort /runners)" = "302" ]; do
  printf '.'
  sleep 5;
done
log "Expecting code 302; received: $(checkGitlabPort /runners)"

#
#
# Step 3 Creating Gitlab Admin API token
#
#
log "3. Deleting all API tokens for root user (id=1)"
# http://gitlab.com/help/administration/troubleshooting/gitlab_rails_cheat_sheet.md
# Alternatively the token digest can be computed as follows:
# salt=$(echo $GITLAB_SECRETS_DB_KEY_BASE | cut -c1-32)
# token=$GITLAB_ADMIN_TOKEN$salt
# token_digest=$(echo $token | openssl sha256 -binary | base64 -)
docker exec -t gitlab sh -c "$(cat << EOM
  gitlab-rails runner -e production "
    User.find(1).personal_access_tokens.each do |cur|
      cur.delete
    end
  "
EOM
)"
log "3. Creating Admin API token $GITLAB_ADMIN_TOKEN. This might take up to 5 minutes"
docker exec -t gitlab sh -c "$(cat << EOM
  gitlab-rails runner -e production "User.find(1).personal_access_tokens.create(
    name: 'admin-api-token',
    token_digest: Gitlab::CryptoHelper.sha256('$GITLAB_ADMIN_TOKEN'),
    impersonation: false,
    scopes: [:api,:sudo]
  )"
EOM
)" #end of $(cat …)

#
#
# Step 3.1 Change gitlab settings
#
#
setMaxArtifactSizeForGitlab
setMaxAttachmentSizeForGitlab

#
#
# Step 4 Get Gitlab Runner registration token
#
#
log "4. Getting Gitlab runners registration token from Gitlab."
RUNNER_REGISTRATION_TOKEN=$(docker exec -t gitlab bash -c 'gitlab-rails runner -e production "puts Gitlab::CurrentSettings.current_application_settings.runners_registration_token"' | tr -d '\r')

#
#
# Step 5 Register Gitlab Runner
#
#
if [ "$INSTANCE_HOST" != "localhost" ]; then
  log "5. Configuring Gitlab Runner for cloud environment"
#  log "5.1 unregister current runners"
#  docker exec -t gitlab-runner sh -c "$(cat << EOM
#    cat /etc/gitlab-runner/config.toml            \
#      | grep "token ="                            \
#      | sed "s/token//"                           \
#      | tr -d " \t"                               \
#      | tr -d "\"="                               \
#      | xargs --no-run-if-empty -I {}             \
#        gitlab-runner unregister                  \
#        --url="http://gitlab:10080/"              \
#        --token={}
#EOM
#  )" #end of $(cat …)

#  CONFIG_TEMPLATE="/etc/gitlab-runner/runner-config.template.toml"
#  docker cp bin/resources/runner-config.template.toml gitlab-runner:etc/gitlab-runner/
#  docker cp bin/resources/development.pem             gitlab-runner:etc/gitlab-runner/
#  docker cp bin/resources/development.pem.pub         gitlab-runner:etc/gitlab-runner/
  #openssl rsa -pubout -in bin/resources/development.pem  > bin/resources/development.pem.pub
#  docker exec gitlab-runner sed -i "s/###AWS_ACCESS_KEY###/$AWS_ACCESS_KEY_ID/"        $CONFIG_TEMPLATE
#  docker exec gitlab-runner sed -i "s~###AWS_ACCESS_SECRET###~$AWS_SECRET_ACCESS_KEY~" $CONFIG_TEMPLATE
#  docker exec gitlab-runner sed -i "s~###INSECURE_REGISTRY###~${MLREEF_DOCKER_REGISTRY}~" $CONFIG_TEMPLATE

  #Configuration for k8s config template
  K8S_CONFIG_TEMPLATE="/etc/gitlab-runner/runner-config.k8s-template.toml" 
  docker cp bin/resources/runner-config.k8s-template.toml gitlab-runner:etc/gitlab-runner/
  docker cp /home/ubuntu/k8s_runner_ca.crt gitlab-runner:etc/gitlab-runner/
  docker cp bin/resources/runner-config.config.toml gitlab-runner:etc/gitlab-runner/
  docker exec gitlab-runner sed -i "s/###K8S_RUNNER_BEARER_TOKEN###/$K8S_RUNNER_BEARER_TOKEN/" $K8S_CONFIG_TEMPLATE

  # clear runner config
  docker exec gitlab-runner sh -c "echo '' > /etc/gitlab-runner/config.toml"
  sleep 10 # This sleep is necessary to allow the gitlab Runner to reload the now empty config file
  #Add customized config.toml
  docker exec gitlab-runner bash -c "cat /etc/gitlab-runner/runner-config.config.toml > /etc/gitlab-runner/config.toml"
  
  docker exec gitlab-runner gitlab-runner register                \
    --non-interactive                                             \
    --template-config="$K8S_CONFIG_TEMPLATE"                      \
    --name="K8S runner on $INSTANCE_HOST"                         \
    --url="http://$INSTANCE_HOST:$GITLAB_PORT/"                   \
    --registration-token="$RUNNER_REGISTRATION_TOKEN"             \
    --executor "kubernetes"                                       \
    --tag-list "k8s-gpu-runner"                                   \
    --run-untagged="true"                                         \
    --locked="false"                                              \
    --limit="5"                                                   

  docker exec gitlab-runner gitlab-runner register                \
    --non-interactive                                             \
    --name="Packaged Dispatcher on $INSTANCE_HOST"                \
    --url="http://$INSTANCE_HOST:$GITLAB_PORT/"                   \
    --docker-network-mode mlreef-docker-network                   \
    --registration-token="$RUNNER_REGISTRATION_TOKEN"             \
    --executor "docker"                                           \
    --docker-image alpine:latest                                  \
    --docker-privileged="true"                                    \
    --docker-helper-image="registry.gitlab.com/mlreef/devops/k8s-images/gitlab-runner-helper:latest" \
    --tag-list "docker,local-docker"                              \
    --run-untagged="false"                                        \
    --locked="false"                                              \
    --access-level="not_protected"                                \
    --limit=1


else ### Configuration for local environments ###
  log "5. Configuring Gitlab Runner for local environment"
  echo "Gitlab RUNNER_REGISTRATION_TOKEN=$RUNNER_REGISTRATION_TOKEN"
  # Register the runner on a local developers machine
  # The main differences are the URL and,
  # no caching on Amazon S3 buckets
  docker exec gitlab-runner gitlab-runner register                \
    --non-interactive                                             \
    --name="Packaged Dispatcher on $INSTANCE_HOST"                \
    --url="http://gitlab:$GITLAB_PORT/"                           \
    --docker-network-mode mlreef-docker-network                   \
    --registration-token="$RUNNER_REGISTRATION_TOKEN"             \
    --executor "docker"                                           \
    --docker-image alpine:latest                                  \
    --docker-volumes /var/run/docker.sock:/var/run/docker.sock    \
    --tag-list "docker"                                           \
    --run-untagged="true"                                         \
    --locked="false"                                              \
    --access-level="not_protected"
fi
docker exec gitlab-runner gitlab-runner verify
log "Runner was registered successfully"

#
#
# Step 6 Start other Services
#
#
log "Ensuring availability of the Gitlab API to start"
until [ "$(checkGitlabPort /api/v4/projects)" = "200" ]; do
  printf '.'
  sleep 5;
done
log "Expecting code 200; received: $(checkGitlabPort /api/v4/projects)"

log "6. Start other services"
docker-compose -f docker-compose.local.yml pull redis && docker-compose -f docker-compose.local.yml up --detach redis 
docker-compose -f docker-compose.local.yml pull mlreefdb && docker-compose -f docker-compose.local.yml up --detach  mlreefdb
# When running in the cloud, we want to explicitly pull new versions of our images before restarting the services (backend & gateway),
# But on localhost, the locally created images for both services or one time pull from docker compose definition of image will be enough
if [ "$INSTANCE_HOST" != "localhost" ]; then
  if [ "${SKIP_BACKEND_DEPLOYMENT:-false}" != "true" ]; then
    docker-compose -f docker-compose.local.yml pull backend && docker-compose -f docker-compose.local.yml up --detach backend
  fi
  if [ "${SKIP_GATEWAY_DEPLOYMENT:-false}" != "true" ]; then
    docker-compose -f docker-compose.local.yml pull gateway && docker-compose -f docker-compose.local.yml up --detach gateway
  fi
else
  #Use local build images when running on localhost
  if [ "${SKIP_BACKEND_DEPLOYMENT:-false}" != "true" ]; then
    docker-compose -f docker-compose.local.yml up --detach backend
  fi
  if [ "${SKIP_GATEWAY_DEPLOYMENT:-false}" != "true" ]; then
    docker-compose -f docker-compose.local.yml up --detach gateway
  fi
fi
sleep 30 # Add an additional sleep in the end to improve user experience; So that Docker is started when the script ends

#
echo "Debug Log: gitlab runner configuration"
docker exec gitlab-runner cat /etc/gitlab-runner/config.toml

if [ "$INSTANCE_HOST" != "localhost" ]; then
  # After all services are up, the older version of images which are no more being used by
  # any containers, can be deleted. The same can be done for any non-persistent volume which is no more being used
  # Cleanup docker images and volumes with below script
  . bin/includes/install-cleanup-docker
fi

###Add insecure registry entry in docker daemon"
echo "adding entry in ${DOCKER_DAEMON_JSON}"
if [ -f ${DOCKER_DAEMON_JSON} ]; then
  if ! grep -P "insecure-registries.*${MLREEF_DOCKER_REGISTRY}.*" ${DOCKER_DAEMON_JSON} ; then
    sed -i '$s/}/,"insecure-registries" : ["'"${MLREEF_DOCKER_REGISTRY}"'"]\n}/' ${DOCKER_DAEMON_JSON}
  fi
else
  echo "{ \"insecure-registries\" : [\"${MLREEF_DOCKER_REGISTRY}\"] }" > ${DOCKER_DAEMON_JSON}
fi
#Reload docker system config
systemctl reload docker
echo "Done - ${DOCKER_DAEMON_JSON} changes"


###gitlab local group and project creation###
export GITLAB_ROOTGROUP=$MLREEF_GITLAB_LOCAL_REGISTRY_GROUP 
export GITLAB_PROJECT=$MLREEF_GITLAB_LOCAL_REGISTRY_PROJECT

#creating root group # 
rootGroupId=$(curl --header "PRIVATE-TOKEN: $GITLAB_ADMIN_TOKEN" "${INSTANCE_HOST}:${GITLAB_PORT}/api/v4/groups?search=$GITLAB_ROOTGROUP" | jq -M 'map(select(.name == "'$GITLAB_ROOTGROUP'"))| .[0].id' )
if [ $rootGroupId == "null" ]; then
  rootGroupId=$(curl --request POST --header "PRIVATE-TOKEN: $GITLAB_ADMIN_TOKEN" --header "Content-Type: application/json" \
  --data '{"path": "'$GITLAB_ROOTGROUP'", "name": "'$GITLAB_ROOTGROUP'", "visibility": "public" ,"lfs_enabled": "true" , "description": "Root Group" }' \
  "${INSTANCE_HOST}:${GITLAB_PORT}/api/v4/groups/" | jq '.["id"]')  
fi
echo "Root group Id: $rootGroupId"
#project creation # 
projectId=$(curl "${INSTANCE_HOST}:${GITLAB_PORT}/api/v4/groups/$rootGroupId/projects?search=$GITLAB_PROJECT" -H "PRIVATE-TOKEN: $GITLAB_ADMIN_TOKEN" | jq -M 'map(select(.name == "'$GITLAB_PROJECT'"))| .[0].id'  )
if [ $projectId == "null" ]; then
  projectId=$(curl --request POST --header "PRIVATE-TOKEN: $GITLAB_ADMIN_TOKEN" --header "Content-Type: application/json" \
  --data '{"path": "'$GITLAB_PROJECT'", "namespace_id": "'$rootGroupId'", "visibility": "public"}' \
  "${INSTANCE_HOST}:${GITLAB_PORT}/api/v4/projects/" | jq '.["id"]')
fi
echo "Project Id: $projectId" 

###gitlab group project creation ends###

###Local epf image upload ###
export LOCAL_CI_REGISTRY="${MLREEF_DOCKER_REGISTRY}"
export LOCAL_CI_REGISTRY_USER=root

if [ -n "${LOCAL_CI_REGISTRY+x}" ] && [ -n "${LOCAL_CI_REGISTRY_USER+x}" ] && [ -n "${GITLAB_ADMIN_TOKEN+x}" ]; then
          echo "$GITLAB_ADMIN_TOKEN" | docker login "$LOCAL_CI_REGISTRY" --username="$LOCAL_CI_REGISTRY_USER" --password-stdin
fi

docker build --tag "$LOCAL_EXPERIMENT_IMAGE_PATH" -f images/experiment/Dockerfile images/experiment
docker push "$LOCAL_EXPERIMENT_IMAGE_PATH"
log "$LOCAL_EXPERIMENT_IMAGE_PATH has been successfully uploaded "

docker build --tag "$LOCAL_EPF_IMAGE_PATH" -f epf/Dockerfile epf
docker push "$LOCAL_EPF_IMAGE_PATH"
log "$LOCAL_EPF_IMAGE_PATH has been successfully uploaded "

###Local epf image upload ends ###

log "Done - MLReef has been successfully installed. "

#echo Test connection for admin:
#curl -f -I -X GET --header "Content-Type: application/json" --header "Accept: application/json" --header "PRIVATE-TOKEN: $GITLAB_ADMIN_TOKEN" "localhost:20080/api/v1"
