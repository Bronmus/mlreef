#!/bin/sh
# change to the repository root folder via the scripts location
cd "$(dirname "$0")"/..
. bin/includes/detect-os
. bin/includes/ci-environment
. bin/includes/ci-detect-ssh-keyfile
########################################
set -x  # output all commands
set -o  pipefail
set -e  # exit on immediately on every error
set -u  # error on usage of undefined variables
########################################


if [ "$INSTANCE_HOST" = "localhost" ]; then
  echo >&2 "ERROR: Cannot deploy to localhost, exiting."
  exit 18;
fi

# Ensure that GITLAB_COM_API_TOKEN is neither unset nor empty
if [ -z "${GITLAB_COM_API_TOKEN-}" ]; then
  echo >&2 "ERROR: Missing API token for gitlab.com 'GITLAB_COM_API_TOKEN'"
  exit 17;
fi


rewriteDockerImage() {
  # If a gateway image exists for the current branch, rewrite the docker compose file
  # change the docker image tag from "latest" to the current branch's $CI_COMMIT_REF_SLUG
  DOCKER_BRANCH_IMAGE_URL="https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/registry/repositories/$1/tags/$CI_COMMIT_REF_SLUG/"
  echo "DOCKER_BRANCH_IMAGE_URL  is $DOCKER_BRANCH_IMAGE_URL"
  CURL_RESPONSE=$(curl --silent --header "Authorization:Bearer $GITLAB_COM_API_TOKEN" --output /dev/null -w ''%{http_code}'' "$DOCKER_BRANCH_IMAGE_URL")
  echo "$CURL_RESPONSE"
  if [ "$CURL_RESPONSE" = "200" ]; then
    echo "Found branch specific docker image for $2"
    sed -i "s/$2:master/$2:$CI_COMMIT_REF_SLUG/" docker-compose.yml;
  else
    echo "Could not find specific docker image for $2:$CI_COMMIT_REF_SLUG in docker registry"
  fi
}
# 1117031 is the id of the "gateway's" sub-repository id
rewriteDockerImage 1117031 "gateway"
# 1151242 is the id of the "backend's" sub-repository id
rewriteDockerImage 1151242 "backend"

###rewrite docker compose file:
# Rewrite external_url and registry_external_url if instance_host is not localhost
sed -i "s/external_url.*'http\:\/\/gitlab\:10080'/external_url 'http\:\/\/${INSTANCE_HOST}\:10080'/" docker-compose.yml;
sed -i "s/registry_external_url.*'http\:\/\/gitlab\:5050'/registry_external_url 'http\:\/\/${INSTANCE_HOST}\:5050'/" docker-compose.yml;
sed -i "s/##GOOGLE_CLIENT_ID##/${GOOGLE_CLIENT_ID}/" docker-compose.yml;
sed -i "s/##GOOGLE_CLIENT_SECRET##/${GOOGLE_CLIENT_SECRET}/" docker-compose.yml;
sed -i "s/##GITHUB_CLIENT_ID##/${GITHUB_CLIENT_ID}/" docker-compose.yml;
sed -i "s/##GITHUB_CLIENT_SECRET##/${GITHUB_CLIENT_SECRET}/" docker-compose.yml;
sed -i "s/##FACEBOOK_CLIENT_ID##/${FACEBOOK_CLIENT_ID}/" docker-compose.yml;
sed -i "s/##FACEBOOK_CLIENT_SECRET##/${FACEBOOK_CLIENT_SECRET}/" docker-compose.yml;
sed -i "s/##LINKEDIN_CLIENT_ID##/${LINKEDIN_CLIENT_ID}/" docker-compose.yml;
sed -i "s/##LINKEDIN_CLIENT_SECRET##/${LINKEDIN_CLIENT_SECRET}/" docker-compose.yml;
sed -i "s/##GITLAB_CLIENT_ID##/${GITLAB_CLIENT_ID}/" docker-compose.yml;
sed -i "s/##GITLAB_CLIENT_SECRET##/${GITLAB_CLIENT_SECRET}/" docker-compose.yml;
sed -i "s/##FREELANCER_CLIENT_ID##/${FREELANCER_CLIENT_ID}/" docker-compose.yml;
sed -i "s/##FREELANCER_CLIENT_SECRET##/${FREELANCER_CLIENT_SECRET}/" docker-compose.yml;
sed -i "s/##LIVE_CLIENT_ID##/${LIVE_CLIENT_ID}/" docker-compose.yml;
sed -i "s/##LIVE_CLIENT_SECRET##/${LIVE_CLIENT_SECRET}/" docker-compose.yml;
sed -i "s/##AZURE_CLIENT_ID##/${AZURE_CLIENT_ID}/" docker-compose.yml;
sed -i "s/##AZURE_CLIENT_SECRET##/${AZURE_CLIENT_SECRET}/" docker-compose.yml;
sed -i "s/##STACKEXCHANGE_CLIENT_ID##/${STACKEXCHANGE_CLIENT_ID}/" docker-compose.yml;
sed -i "s/##STACKEXCHANGE_CLIENT_SECRET##/${STACKEXCHANGE_CLIENT_SECRET}/" docker-compose.yml;
sed -i "s/##STACKEXCHANGE_CLIENT_KEY##/${STACKEXCHANGE_CLIENT_KEY}/" docker-compose.yml;
sed -i "s/##DEBUG_MODE##/${DEBUG_MODE}/" docker-compose.yml;

# Activate (uncomment) specific lines in the docker-compose file
# remove tagged lines in the docker-compose file
sed "s~#CI_ACTIVATE~~" < docker-compose.yml \
  | sed "/#CI_DELETE_LINE/d" > docker-compose.local.yml

##Define seperate k8s authentication variables for dev and prod environment
if [ "$CI_COMMIT_REF_SLUG" = "master" ]; then
  K8S_RUNNER_BEARER_TOKEN=$PROD_K8S_RUNNER_BEARER_TOKEN
  ###Copy k8s ca cert for runner from CI variable
  cat "$PROD_K8_RUNNER_CA_CRT" > "$(pwd)/k8s_runner_ca.crt"

else
  K8S_RUNNER_BEARER_TOKEN=$DEV_K8S_RUNNER_BEARER_TOKEN
  ###Copy k8s ca cert for runner from CI variable
  cat "$DEV_K8_RUNNER_CA_CRT" > "$(pwd)/k8s_runner_ca.crt"
fi

### Prepare ssh connection
while ! ssh-keyscan -H "$INSTANCE_HOST" >>~/.ssh/known_hosts; do echo "Trying again..."; sleep 5; done

ssh -i   "$SSH_KEYFILE" -o 'AddKeysToAgent yes' ubuntu@"${INSTANCE_HOST}" "if [ -e ${SSH_KEYFILE} ]; then sudo rm $SSH_KEYFILE; fi"
scp -rpi "$SSH_KEYFILE" -o 'AddKeysToAgent yes' bin epf images k8s_runner_ca.crt  ubuntu@"${INSTANCE_HOST}":/home/ubuntu/
scp -rpi "$SSH_KEYFILE" -o 'AddKeysToAgent yes' docker-compose.local.yml  ubuntu@"${INSTANCE_HOST}":/home/ubuntu/
ssh -i "$SSH_KEYFILE" -o 'AddKeysToAgent yes' ubuntu@"${INSTANCE_HOST}" "
  echo ${CI_REGISTRY_PASSWORD} | sudo docker login ${CI_REGISTRY} --username=${CI_REGISTRY_USER} --password-stdin
"

if [ "$GITLAB_ADMIN_TOKEN" = "" ]; then exit 19; fi

### Execute the actual deployment ###
ssh -i "$SSH_KEYFILE" -o 'AddKeysToAgent yes' ubuntu@"${INSTANCE_HOST}" <<EOF
  sudo docker images;
  sudo docker ps;
  sudo bin/install                                              \
    --instance $INSTANCE_HOST                                   \
    --version $CI_COMMIT_REF_SLUG                               \
    --key $AWS_ACCESS_KEY_ID                                    \
    --secret $AWS_SECRET_ACCESS_KEY                             \
    --gitlab-admin-token $GITLAB_ADMIN_TOKEN                    \
    --noreply-email $NOREPLY_EMAIL                              \
    --noreply-email-password $NOREPLY_EMAIL_PASSWORD            \
    --gitlab-secrets-key-base secret1111111111122222222222333333333334444444444555555555566666666661234 \
    --gitlab-opt-key-base secret1111111111122222222222333333333334444444444555555555566666666661234     \
    --gitlab-db-key-base secret1111111111122222222222333333333334444444444555555555566666666661234      \
    --k8s-runner-token $K8S_RUNNER_BEARER_TOKEN
EOF
