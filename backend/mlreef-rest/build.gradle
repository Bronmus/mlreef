plugins {
    id 'io.spring.dependency-management'
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'org.jetbrains.kotlin.jvm'
    id 'kotlin-spring'
    id 'kotlin-jpa'
    id 'kotlin-allopen'
    id 'org.asciidoctor.convert' version "1.5.9.2"
    id 'jacoco'
    id 'antlr'
}

group = 'com.mlreef'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9'
    implementation "org.projectlombok:lombok"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.10"

    implementation "org.springframework.boot:spring-boot-devtools"
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Rest and HATEOAS
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Security
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.session:spring-session-data-redis"
//    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"

    // spring data, JPA, Repositories and DB migration
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "org.flywaydb:flyway-core"
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'redis.clients:jedis:3.3.0'
    runtimeOnly 'com.h2database:h2'

    //Social
    implementation 'com.github.scribejava:scribejava-core:8.3.1'
    implementation 'com.github.scribejava:scribejava-apis:8.3.1'

    //External drives
    implementation 'com.amazonaws:aws-java-sdk:1.12.21'

    // parsing python files with ANTLR
    antlr 'org.antlr:antlr4:4.7.2'
    implementation 'org.antlr:antlr4-runtime:4.7.2'

    //Email
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    //WebFlux
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("io.projectreactor.netty:reactor-netty")

    def jupiter = "5.6.2"
    def mockkVersion = "1.10.2"
    testImplementation "org.junit.jupiter:junit-jupiter:$jupiter"
    // DO NOT USE:   testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiter"
    // DO NOT USE:   testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiter"
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
        exclude group: 'junit', module: 'junit' //by both name and group
        exclude group: 'mockito', module: 'mockito-core' //by both name and group
    }
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc"
    testImplementation "io.mockk:mockk:${mockkVersion}"
    testImplementation "com.ninja-squad:springmockk:2.0.1"
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // testcontainers
    testImplementation "org.testcontainers:testcontainers:1.15.1"
    testImplementation "org.testcontainers:postgresql:1.15.1"

    //ebedded servers
    testImplementation "com.github.kstyrc:embedded-redis:0.6"
    testImplementation "org.eclipse.jgit:org.eclipse.jgit:5.8.1.202007141445-r"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

noArg {
    annotation("com.mlreef.rest.api.Dto")
    annotation("com.mlreef.rest.api.DtoRequest")
}

ext {
    snippetsDir = file('build/generated-snippets')
    jacocoMerged = "$buildDir/jacoco/jacocoTest.exec"
}

sourceSets {
    sourceSets.main.java.srcDir new File("build/generated-src/")
    test {
        kotlin {
            srcDir "$projectDir/test/kotlin"
            exclude "$projectDir/test/kotlin/com/mlreef/rest/integration/**"
        }
    }
    integrationTest {
        kotlin.srcDir "$projectDir/test/kotlin/com/mlreef/rest/integration"
        resources.srcDir "$projectDir/test/resources"
    }
}


task allTests(type: Test) {
    useJUnitPlatform {
        includeTags 'any() | all()'
    }
    finalizedBy jacocoTestReport
}

task integrationTest(type: Test) {
    useJUnitPlatform {
        includeTags 'integration'
    }
    finalizedBy jacocoTestReport
    jacoco {
//        append = true
        destinationFile = file("$jacocoMerged")
    }
}

tasks.withType(Test) {
    testLogging {
//        events "started", "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
    afterTest { descriptor, result ->
        println "$descriptor.classDisplayName > $descriptor.displayName: $result.resultType"
    }
}

test {
    outputs.dir snippetsDir
    finalizedBy jacocoTestReport

    useJUnitPlatform {
        excludeTags 'slow', 'system'
    }

    jacoco {
//        append = true
        destinationFile = file("$jacocoMerged")
    }
}

//integrationTest {
//    jacoco {
//        append = true
//        destinationFile = file("$jacocoMerged")
//    }
//}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

bootJar {
    enabled = true
    mainClassName = 'com.mlreef.rest.RestApplicationKt'
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

jar {
    enabled = true
    zip64 = true
}


task fatJar(type: Jar) {
    manifest.from jar.manifest
    zip64 = true
    from {
        configurations.testRuntime.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.enabled = true
    }
}

task explodeJar(type: Copy) {
    dependsOn ":mlreef-rest:bootJar"
    mustRunAfter ":mlreef-rest:bootJar"
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

task prepareDocker {
    dependsOn ":mlreef-rest:bootJar"
    dependsOn ":mlreef-rest:explodeJar"
    mustRunAfter ":mlreef-rest:explodeJar"
    doLast {
        print("Exploded Jar for docker")
    }
}

task coverageReport() {
    dependsOn jacocoTestReport

    def reportFile = project.file("build/reports/jacoco/test/jacocoTestReport.xml")
    inputs.file(reportFile)

    doLast {
        def slurper = new XmlSlurper()
        slurper.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        slurper.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        def xml = slurper.parse(reportFile)
        def counter = xml.counter.find {
            node -> node.@type == 'BRANCH'
        }
        def missed = counter.@missed.toDouble()
        def covered = counter.@covered.toDouble()
        def total = missed + covered
        def percentage = covered / total * 100

        printf "Coverage: Missed %.0f branches%n", missed
        printf "Covered %.0f branches%n", covered
        printf "Total %.0f%%%n", percentage
        printf "Coverage: Total %.0f%%%n", percentage
    }
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor"]
    outputDirectory = file("build/generated-src/com/mlreef/antlr")
}

compileKotlin.dependsOn generateGrammarSource

allOpen {
    annotation("javax.persistence.Entity")
    annotation("javax.persistence.MappedSuperclass")
    annotation("javax.persistence.Embeddable")
}

